generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@index([userId])
}

model User {
  id            String         @id @default(uuid())
  name          String?
  bio           String?
  email         String         @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map(name: "updated_at")
  sessions      Session[]
  accounts      Account[]
  organizations organization[]
  posts         Post[]
}

model organization {
  id          String   @id @default(uuid())
  name        String
  email       String
  mosquename  String
  description String?
  logo        String?
  location    String?
  zipcode     String
  phone       String
  district    String
  city        String
  state       String
  members     Member[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Member {
  id    String @id @default(uuid())
  name  String
  price Int

  organization   organization @relation(fields: [organizationId], references: [id])
  organizationId String
}

model Post {
  id        String   @id @default(uuid())
  title     String
  content   String
  published Boolean?
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  String
}
